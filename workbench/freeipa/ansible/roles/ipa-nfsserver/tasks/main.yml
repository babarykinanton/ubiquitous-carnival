---
- name: install nfs-utils
  tags:
    - ipa-nfsserver
    - package-install
    - network
  package: name=nfs-utils state=present
  when: package_install

- name: Open Firewall for NFS
  tags:
    - ipa-nfsserver
    - firewall
  firewalld:
    service={{ item }}
    permanent=true
    state=enabled
    immediate=yes
  with_items:
    - nfs
    - rpc-bind
    - mountd
  when: has_firewalld.stat.exists

- name: Get keytab content
  tags:
    - ipa-nfsserver
    - ipa-install
  command: klist -ke /etc/krb5.keytab
  register: keytab
  changed_when: false

- name: Check for principal in keytab
  tags:
    - ipa-nfsserver
    - ipa-install
  changed_when: false
  set_fact:
   keytab_nfs_principal: "{{ 'nfs/{{ ansible_fqdn }}' in keytab.stdout }}"

- name: Create NFS service
  tags:
    - ipa-nfsserver
    - ipa-install
  ipa:
    args="service-add --force nfs/{{ ansible_fqdn }}"
    password="{{ ipa_admin_password }}"
    ignore_already_exists=true
  when: not keytab_nfs_principal

- name: Add NFS service to keytab
  tags:
    - ipa-nfsserver
    - ipa-install
  ipa: >
    cmd=ipa-getkeytab
    args="-s $IPA_SERVER -p nfs/{{ ansible_fqdn }} -k /etc/krb5.keytab"
    password="{{ ipa_admin_password }}"
  when: not keytab_nfs_principal

- name: Create /exports/home
  tags:
    - ipa-nfsserver
    - ipa-install
  file:
    path=/export/home
    state=directory
    owner=root
    group=root
    mode=0755
    seuser=system_u
    serole=object_r
    setype=home_root_t
    selevel=s0

- name: Add NFS export
  tags:
    - ipa-nfsserver
    - ipa-install
  lineinfile:
    dest=/etc/exports
    regexp=^/export
    line="/export *(rw,subtree_check,sec=krb5:krb5i:krb5p)"
  notify:
    - restart NFS

- name: Enable NFS server
  tags:
    - ipa-nfsserver
    - ipa-install
  service: name={{ item }} enabled=yes state=started
  with_items:
    - nfs-secure
    - nfs-server

- name: look for auto.home in default location
  tags:
    - ipa-nfsserver
    - ipa-install
  ipa:
    args="automountkey-find default auto.home"
    password="{{ ipa_admin_password }}"
  register: automountkey
  failed_when: false
  changed_when: false

- name: Set has_auto_home fact
  tags:
    - ipa-nfsserver
    - ipa-install
  set_fact: has_auto_home="{{ '/export/home' in automountkey.stdout }}"

- name: add automount default location
  tags:
    - ipa-nfsserver
    - ipa-install
  ipa:
    args="automountlocation-add default"
    password="{{ ipa_admin_password }}"
    ignore_already_exists=true
  when: not has_auto_home

- name: add auto.home map
  tags:
    - ipa-nfsserver
    - ipa-install
  ipa:
    args="automountmap-add default auto.home"
    password="{{ ipa_admin_password }}"
    ignore_already_exists=true
  when: not has_auto_home

- name: add auto.home to auto.master
  tags:
    - ipa-nfsserver
    - ipa-install
  ipa:
    args="automountkey-add default --key '/export/home' --info auto.home auto.master"
    password="{{ ipa_admin_password }}"
    ignore_already_exists=true
  when: not has_auto_home

- name: automountkey-add default auto.home
  tags:
    - ipa-nfsserver
    - ipa-install
  ipa:
    args="automountkey-add default auto.home --key='*' --info='-fstype=nfs4,rw,sec=krb5,soft {{ ansible_fqdn }}:/export/home/&'"
    password="{{ ipa_admin_password }}"
    ignore_already_exists=true
  when: not has_auto_home

- name: Get FreeIPA users
  tags:
    - ipa-nfsserver
    - ipa-nfs-homedirs
    - ipa-install
  ipa:
    args="user-find"
    password="{{ ipa_admin_password }}"
    result_regex="User\ login:\ ([\w\.-]*)"
  register: ipa_users
  changed_when: false

# XXX are these sensible settings for SELinux context?
- name: Create home directory for FreeIPA users
  tags:
    - ipa-nfsserver
    - ipa-nfs-homedirs
    - ipa-install
  shell: >
    if [ ! -d /export/home/{{ item }} ]; then
      cp -r /etc/skel /export/home/{{ item }};
      touch /export/home/{{ item }}/NFS;
      chcon -R unconfined_u:object_r:user_home_t:s0 /export/home/{{ item }};
      chown -R {{ item }}: /export/home/{{ item }};
    fi;
  with_items: "{{ ipa_users.results }}"

- name: Run ipa-client-automount on master, replicas and clients
  tags:
    - ipa-nfsserver
    - ipa-install
  # workaround for FreeIPA 4.4: ipalib.api.finalize() needs Kerberos
  # credentials to load LDAP schema cache.
  command:
    env KRB5_CLIENT_KTNAME=/etc/krb5.keytab ipa-client-automount --unattended
  register: result
  failed_when: "{{ result.rc != 0 and 'automount is already configured' not in result.stderr }}"
  changed_when: "{{ result.rc == 0 }}"
  delegate_to: "{{item}}"
  with_items: "{{ groups['ipa_nfsclient'] }}"
